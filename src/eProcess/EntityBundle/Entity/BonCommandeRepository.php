<?php

namespace eProcess\EntityBundle\Entity;

use eProcess\SecurityBundle\Constantes\TypeDate;
use eProcess\SecurityBundle\Constantes\Status;
use eProcess\SecurityBundle\Constantes\EtapeBon;

/**
 * BonCommandeTable
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BonCommandeTable extends \Doctrine\ORM\EntityTable {

    public function getNextNumber() {
        $date = new \DateTime();
        $stringDate = $date->format('-my');
        $resultSet = $this->findAll();


        $nbre = count($resultSet);
        // si le tableau est vide on renvoi 1 si non on incrémente le  resultat de 1
        $result = ( $nbre > 0) ? ($nbre + 1) : 1;
        // on formate le resultat sur 6 positions dont les espaces vides de gauche sont remplis par 0
        return 'BC-' . str_pad($result . $stringDate, 9, '0', STR_PAD_LEFT);
    }

    public function findByEtapeAndFour($etape = 0, $idFour = 0) {
        $qb = $this->createQueryBuilder('b')
                ->innerJoin('b.achat', 'a')
                ->innerJoin('a.fournisseur', 'f');

        (!$etape && !$idFour ) ? $qb->where('1 != 1') : $qb->where('1 = 1');
        $qb->andWhere('b.isActif != ' . Status::SUPPRIME);
        ($etape != 0) ? $qb->andWhere('b.etape = ' . $etape) : '';
        ($idFour != 0) ? $qb->andWhere('f.id = ' . $idFour) : '';

        
        return $qb->getQuery()->getResult();
    }

    
    /**
     * getBonEdition : fonction de recuperation des bons de commande
     *      qui sont nouvellement edités ou verifiés
     * 
     * @param type $max
     */
    public function getBonEdition($max=30) {
//        var_dump($max);exi;
          $qb = $this->createQueryBuilder('b')
                ->where('b.etape = ' . EtapeBon::BON_EMIS )
                ->orWhere('b.etape = ' . EtapeBon::BON_VERIFIE)
                ->addOrderBy('b.dateCreation','DESC')
                  ->setMaxResults($max)
                  ->getQuery()
                  ->getResult()
                  ;
        return $qb;
    }
    
    
    
    
    
    
    
    public function findMultiCritere($idFour = 0, $etape = 0, $montMin = 0, $montMax = 0, $devise = '', $debut = '', $fin = '', $typeDate = 0) {
        
        
       $sql = ' select'
               . ' b.id              as id, '
               . ' b.numero          as numero, '
               . ' a.objet           as objet, '
               . ' a_d.montant         as montant , '
               . ' a.devise          as devise, '
               . ' b.etape           as etape, '
               . ' a.fournisseur_id   as fournisseurId '
               
               . ' from bon_commande b'
                    . ' inner join achat a on a.id = b.achat_id '
                    . ' inner join achat_departement a_d on a.id = a_d.achat_id '
                    . ' inner join fournisseur f on f.id = a.fournisseur_id ';
        
      
        

       
        
        // controle au cas ou rien n'est saisie
        if(!$etape && !$idFour  && !$montMin && !$montMax && !$debut && !$fin && !$devise ){
              $sql .=' where 1 != 1' ;
        }  else {
             $sql .=' where 1 = 1 ' ;
        }
        
        if ($idFour) {
             $sql .=' and f.id = '.$idFour ;
        }
        
        
        if ($etape) {
             $sql .=' and  b.etape = '. $etape ;
        }

        if ($montMin) {
            $sql .=" and ( select SUM( CAST(replace(a_d.montant,' ','') AS SIGNED )  ) ) >= ".$montMin ;
        }
        
        if ($montMax) {
            $sql .=" and ( select SUM( CAST(replace(a_d.montant,' ','') AS SIGNED )  ) ) <= " .$montMax;
//             $sql .=" and CAST(replace(a.montant,' ','') AS SIGNED) <= " .$montMax;
        }


        if ($devise) {
             $sql .=" and a.devise = '". $devise."'" ;
        }
        

        if ($debut) {
            $dateDebut = implode('-', array_reverse(explode('-', $debut))) . ' 00:00:00';
            if ($typeDate == TypeDate::DATE_CREATION) {
                  $sql .=' and b.dateCreation >= \'' . $dateDebut . '\' ' ;
            } 
            else if ($typeDate == TypeDate::DATE_AUTORISE) {
                 $sql .=' and b.dateActivation >= \'' . $dateDebut . '\'' ;
            }
        }

        if ($fin) {
            $dateFin = implode('-', array_reverse(explode('-', $fin))) . ' 23:59:59';
            
            if ($typeDate == TypeDate::DATE_CREATION) {
                 $sql .=' and b.dateCreation <= \'' . $dateFin . '\'' ;
            } 
            else if ($typeDate == TypeDate::DATE_AUTORISE) {
                 $sql .=' and b.dateActivation <= \'' . $dateFin . '\'' ;
            }
        }
        
         $connection = $this->_em->getConnection();
                $statement = $connection->prepare($sql);
                $statement->execute();
                $bonRecherche  = $statement->fetchAll();
//                
//                var_dump($bonRecherche);exit;
        
        return $bonRecherche;
        
        
        
        
        
//        
//        $qb = $this->createQueryBuilder('b')
//                ->innerJoin('b.achat', 'a')
//                ->innerJoin('a.fournisseur', 'f');
//
//        // controle au cas ou rien n'est saisie
//        (!$etape && !$idFour && !$montMin && !$montMax && !$devise && !$debut && !$fin) ? $qb->where('1 != 1') : $qb->where('1 = 1');
//
//
//
////        // debut des conditions par parametre
////        $qb->andWhere('b.isActif != ' . Status::SUPPRIME);
//
//        if ($idFour) {
//            $qb->andWhere('f.id = ' . $idFour);
//        }
//
//        if ($etape) {
//            $qb->andWhere('b.etape = ' . $etape);
//        }
//
//        if ($montMin) {
//            $qb->andWhere('a.montant >= ' . $montMin);
//        }
//
//        if ($montMax) {
//            $qb->andWhere('a.montant <= ' . $montMax);
//        }
//
//        if ($devise) {
//            $qb->andWhere('a.devise = \'' . $devise . '\' ');
//        }
//
//        if ($debut) {
//            $dateDebut = implode('-', array_reverse(explode('-', $debut))) . ' 00:00:00';
//            if ($typeDate = TypeDate::DATE_CREATION) {
//                $qb->andWhere('b.dateCreation >= \'' . $dateDebut . '\' ');
//            } else if ($typeDate = TypeDate::DATE_AUTORISE) {
//                $qb->andWhere('b.dateActivation >= \'' . $dateDebut . '\' ');
//            }
//        }
//
//        if ($fin) {
//            $dateFin = implode('-', array_reverse(explode('-', $fin))) . ' 23:59:59';
//            if ($typeDate = TypeDate::DATE_CREATION) {
//                $qb->andWhere('b.dateCreation <= \'' . $dateFin . '\' ');
//            } else if ($typeDate = TypeDate::DATE_AUTORISE) {
//                $qb->andWhere('b.dateActivation <= \'' . $dateFin . '\' ');
//            }
//        }
////        var_dump($qb->getDQL());exit;
//        return $qb->getQuery()->getResult();
    }

    
    
    
    
    
    
    
    
    public function getStatistiqueMensuel() {
        $annee = date('Y-');


        $mois = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
        $nbreBon = array();

        $qb = $this->createQueryBuilder('b')
                ->where('1 = 1');
//                ->where('b.isActif != ' . Status::SUPPRIME);

        foreach ($mois as $m) {
            $params['dateDebut'] = $annee . $m . '-01 00:00:00\'';
            $params['dateFin'] = $annee . $m . '-28 23:59:59\' ';

            $qb
                    ->andWhere('b.dateCreation >= :dateDebut')
                    ->andWhere('b.dateCreation <= :dateFin ')
                    ->setParameters($params)
            ;
//var_dump($qb->getDql());


            $nbreBon[] = count($qb->getQuery()->getResult());
        }
// var_dump($nbreBon);exit;
        return json_encode($nbreBon);
    }

    /**
     * findBonApprobation : fonction de recuperation des bons de commande qui sont en approbation :
     *  c'est à dire les bons qui sont à autoriser ou rejeter et les bons dont on a déjà
     * aprouvé ou rejeté mais qui ne sont pas encore envoyés 
     * 
     * @param type $etape
     * @param type $curentID
     * @param type $dejaApprouve
     * @return type
     */
    public function findBonApprobation($curentID, $AttenteSignature) {
        $qb = $this->createQueryBuilder('b')
                ->where('b.isActif != ' . Status::SUPPRIME);
                
                

        // recuperation des bons qui ne sont pas creer par l'utilisateur courant et qui sont à approuver
        if (!$AttenteSignature) {
            $qb->andWhere('b.etape = ' . EtapeBon::BON_SOUMIS_AUTORISATION)
                ->andWhere('b.creerPar != ' . $curentID)
                ->andWhere('b.activerPar =' . $curentID);
        }


        // recuperation des bons approuves  courant mais  qui n'ont pas encore été signé
        else {
            $qb->andWhere('b.etape = ' . EtapeBon::BON_APPROUVE)
                ->andWhere('b.creerPar != ' . $curentID)
                ->andWhere('b.activerPar =' . $curentID)
                ->andWhere('b.isActif = ' . Status::INACTIF);
        }

        return $qb->getQuery()->getResult();
    }

    
    /**
     * getBonOfReception : fonction de recuperation des ids et numeros de bons de commande dont les factures 
     *    peuvent être reçu à la reception  
     *  
     * 
     * @return array
     */
    public function getBonOfReception() {
        $IdAndNumBon = array() ;
        $listeEtapeBon = '( ' . EtapeBon::BON_APPROUVE . ',' . EtapeBon::BON_ATTENE_ENVOI . ',' . EtapeBon::BON_CHEZ_FOUNISSEUR . ',' . EtapeBon::BON_CHARGE.')';
        $listBon = $this->createQueryBuilder('b')
                ->innerJoin('b.achat', 'a')
                ->where('a.facture is null')
                ->andWhere('b.isActif = ' . Status::ACTIF)
                ->andWhere('b.etape in  ' . $listeEtapeBon)
                ->getQuery()->getResult();

        foreach ( $listBon  as $bon) {
            $IdAndNumBon[$bon->getId()] =  $bon->getNumero();
        }
        
        return $IdAndNumBon;
    }

}
