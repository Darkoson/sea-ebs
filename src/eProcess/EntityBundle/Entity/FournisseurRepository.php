<?php

namespace eProcess\EntityBundle\Entity;

use eProcess\SecurityBundle\Constantes\Status;

/**
 * FournisseurTable
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FournisseurTable extends \Doctrine\ORM\EntityTable {

    /**
     * findDeletables : fonction de recuperation des fournisseurs supprimables
     * 
     */
    public function findDeletables() {
        $result = array();

        // recuperation des fournisseurs 
        $desactiveFour = $this->createQueryBuilder('f')
                        ->where('f.isActif = ' . Status::INACTIF)
                        ->getQuery()->getResult();

        // recuperation des fournisseur sans facture parmmis ces fournisseurs desactivés
        foreach ($desactiveFour as $fournisseur) {
            $nbFact = count($fournisseur->getFactures());
            $nbAchat = count($fournisseur->getAchats());
            if ($nbAchat == 0 && $nbFact == 0) {
                $result[] = $fournisseur;
            }
        }

        // renvoi de la liste des fournisseurs à supprimer
        return $result;
    }

    /**
     * findNomLike :  fonction de recuperation des fournisseurs ayant des noms semblables à $nomFour
     * 
     * @param string $nomFour
     */
    public function findNomLike($nomFour) {
//        $fournisseur = null;
        $arrayNom = split(' ', trim($nomFour));
        $sql = "select id, nom from fournisseur f where nom like '" . $arrayNom[0] . "%'";
        $total = count($arrayNom);
      
        if ($total > 1) {
            $sql .= " and (";
            for ($i = 1; $i < $total; $i++) {
                $sql .= ($i == 1) ? " nom like '%" . $arrayNom[$i] . "%'" : " or nom like '%" . $arrayNom[$i] . "%' ";
            }
            $sql .= " )";
        }

        $connection = $this->_em->getConnection();
        $statement = $connection->prepare($sql);
        $statement->execute();
        $fourRecherche = $statement->fetchAll();

//        var_dump($fourRecherche);exit;
//
//        $fourPossibles = $this->createQueryBuilder('f')
//                        ->where("f.nom like '" . $arrayNom[0] . "%'")
//                        ->getQuery()->getResult();
////var_dump($fourPossibles);exit;
//
//
//
//        foreach ($fourPossibles as $fourTrouve) {
//            $i = 0;
//            $nomTrouve = $fourTrouve->getNom();
//            foreach ($arrayNom as $mot) {
//                substr_count($nomTrouve, $mot) ? $i++ : '';
//            }
//
//            $i >= 2 ? $fournisseur = $fourTrouve : '';
//        }

        return $fourRecherche;
    }

}
