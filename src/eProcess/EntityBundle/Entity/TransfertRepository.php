<?php

namespace eProcess\EntityBundle\Entity;

use eProcess\SecurityBundle\Constantes\EtapeTranfert;
use eProcess\SecurityBundle\Constantes\TypeProfile;

/**
 * TransfertTable
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransfertTable extends \Doctrine\ORM\EntityTable {

    /**
     *  findTransfert : fonction de recuperation des transferts faits par un profile
     * 
     */
    public function findTransfert($codeProfile, $sens, $recu, $etape=0, $all=false) {
        $qb = $this->createQueryBuilder('t');
        $result = array() ;

        // traitement des cas des envois 
        if ($sens == EtapeTranfert::ENVOYER) {
            if ($codeProfile == TypeProfile::RECEPTION) {
                $qb->where('t.etape = ' . EtapeTranfert::RECEPT_EBS);
            }
            if ($codeProfile == TypeProfile::EBS) {
                $qb->where('t.etape = ' . EtapeTranfert::EBS_OPS);
            }
            if ($codeProfile == TypeProfile::OPERATIONS) {
                $qb->where('t.etape = ' . EtapeTranfert::OPS_EBS);
            }

            $qb->orderBy('t.dateCreation', 'DESC');
        }

        // traitement des cas des receptions
        else if ($sens == EtapeTranfert::RECEVOIR) {

            $codeTransf = EtapeTranfert::AUCUN;
            // recuperation des transfert destinés à EBS
            if ($codeProfile == TypeProfile::EBS) {
                $codeTransf = EtapeTranfert::OPS_EBS . ',' . EtapeTranfert::RECEPT_EBS;
            }

            // recuperation des transfert destinés à OPS
            if ($codeProfile == TypeProfile::OPERATIONS) {
                $codeTransf = EtapeTranfert::EBS_OPS;
            }

            $qb->where('t.etape in (' . $codeTransf . ')');
        }

      

        //condition relative à l'etape du transfert
        if ($etape) {
            $qb->andWhere('t.etape ='.$etape);
        }
        
        //condition relative à l'acceptation du transfert : ce ci doit etre la derniere condition
        if ($recu) {
            $qb->andWhere('t.isActif = 1');
            $qb->orderBy('t.dateActivation', 'DESC');
        } else {
            $qb->andWhere('t.isActif =0');
        }
        
        if($all){
            $result = $qb->getQuery()->getResult();
        }  
        else {
             $result = $qb->getQuery()->setMaxResults(15)->getResult();
        }
        
        return $result;
    }
  
    public function getStatistique($codeProfile) {
        $result['Encours d\'envoi'] = count($this->findTransfert($codeProfile,  EtapeTranfert::ENVOYER, false, $etape=0, $all=true)) ;
        $result['Envoyés'] =   count($this->findTransfert($codeProfile,  EtapeTranfert::ENVOYER, true, $etape=0, $all=true)) ;
        $result['Attente de reception'] =  count($this->findTransfert($codeProfile,  EtapeTranfert::RECEVOIR , false, $etape=0, $all=true)) ;
        $result['Reçus'] =   count($this->findTransfert($codeProfile,  EtapeTranfert::RECEVOIR , true, $etape=0, $all=true)) ;
    
        return   json_encode($result);
    }
    
    
    
}
